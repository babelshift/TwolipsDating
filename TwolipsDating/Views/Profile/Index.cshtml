@model TwolipsDating.ViewModels.ProfileViewModel

@{
    ViewBag.Title = "twolips - your profile";
}

@if (Model != null && Model.ViewMode == TwolipsDating.ViewModels.ProfileViewModel.ProfileViewMode.ShowProfile)
{
    <div class="modal fade" id="modalGift" tabindex="-1" role="dialog" aria-labelledby="modalGiftLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="modalReviewLabel">Send gifts to @Model.UserName</h4>
                </div>
                @if (Model.ViewerInventoryItems.Count > 0)
                {
                    using (Html.BeginForm("sendgift", "profile", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary()
                        <div class="modal-body">
                            <div class="form-group">
                                <div class="row">
                                    @foreach (var item in Model.ViewerInventoryItems)
                                    {
                                        <div class="col-md-2">
                                            <a id="@item.InventoryItemId" data-gift-id="@item.GiftId" href="#" onclick="onSelectGiftClick(event, this)">
                                                <img src="@item.GiftIconFilePath">
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                            @Html.HiddenFor(m => m.ActiveTab)
                            @Html.HiddenFor(m => m.SendGift.GiftId)
                            @Html.HiddenFor(m => m.SendGift.InventoryItemId)
                            @Html.HiddenFor(m => m.ProfileId)
                            @Html.HiddenFor(m => m.ProfileUserId)
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Send gift</button>
                        </div>
                    }
                }
                else
                {
                    <div class="modal-body">
                        <p>You don't have any items to send. Go get some and come back!</p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalReview" tabindex="-1" role="dialog" aria-labelledby="modalReviewLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="modalReviewLabel">New review for @Model.UserName</h4>
                </div>
                @using (Html.BeginForm("writereview", "profile", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.LabelFor(m => m.WriteReview.RatingValue, new { @class = "control-label" })
                            <div id="star"></div> <small>(hover and select star)</small>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.WriteReview.ReviewContent, new { @class = "control-label" })
                            @Html.TextAreaFor(m => m.WriteReview.ReviewContent, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Submit review</button>
                    </div>
                    @Html.HiddenFor(m => m.ProfileId)
                    @Html.HiddenFor(m => m.ActiveTab)
                    @Html.HiddenFor(m => m.ProfileUserId)
                    @Html.HiddenFor(m => m.WriteReview.RatingValue)
                }
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalMessage" tabindex="-1" role="dialog" aria-labelledby="modalMessageLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="modalMessageLabel">New message to @Model.UserName</h4>
                </div>
                @using (Html.BeginForm("sendmessage", "profile", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.TextAreaFor(m => m.SendMessage.MessageBody, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Send message</button>
                    </div>
                    @Html.HiddenFor(m => m.ProfileId)
                    @Html.HiddenFor(m => m.ActiveTab)
                    @Html.HiddenFor(m => m.ProfileUserId)
                }
            </div>
        </div>
    </div>
    if (Model.ActiveTab == "pictures" || Model.CurrentUserId == Model.ProfileUserId)
    {
        <div class="modal fade" id="modalProfileImage" tabindex="-1" role="dialog" aria-labelledby="modalProfileImageLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="modalProfileImageLabel">Select your profile image</h4>
                    </div>
                    @using (Html.BeginForm("changeimage", "profile", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary()
                        <div class="modal-body">
                            <div class="row">
                                @foreach (var userImage in Model.UploadImage.UserImages)
                                {
                                    <div class="col-xs-6 col-md-3">
                                        <a id="@userImage.Id" href="#" class="thumbnail" onclick="onSelectProfileImageClick(event, this)">
                                            <img src="@userImage.Path" style="max-height: 128px;">
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">OK</button>
                        </div>
                        @Html.HiddenFor(m => m.ActiveTab)
                        @Html.HiddenFor(m => m.ProfileUserId)
                        @Html.HiddenFor(m => m.ProfileId)
                        @Html.HiddenFor(m => m.ChangeImage.UserImageId)
                    }
                </div>
            </div>
        </div>
    }
    <div class="modal fade" id="modalSuggestTags" tabindex="-1" role="dialog" aria-labelledby="modalSuggestTagsLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="modalSuggestTagsLabel">Managing tag suggestions</h4>
                </div>
                @using (Html.BeginForm("sendmessage", "profile", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <div class="tags">
                            @foreach (var tag in Model.AllTags)
                            {
                                if (tag.DidUserSuggest)
                                {
                                    <a href="#" id="@String.Format("{0}-tag-button", tag.TagId)" onclick="onSuggestTag(event, this, @tag.TagId)" class="btn btn-primary btn-xs" title="a clever one">
                                        <span id="@String.Format("{0}-tag-count", tag.TagId)" class="badge">@tag.TagCount</span> @tag.TagName
                                    </a>
                                    <a href="#" onclick="onSuggestTag(event, this, @tag.TagId)"><i id="@String.Format("{0}-tag-glyph", tag.TagId)" class="glyphicon glyphicon-minus"></i></a>
                                }
                                else
                                {
                                    <a href="#" id="@String.Format("{0}-tag-button", tag.TagId)" onclick="onSuggestTag(event, this, @tag.TagId)" class="btn btn-default btn-xs" title="a clever one">
                                        <span id="@String.Format("{0}-tag-count", tag.TagId)" class="badge">@tag.TagCount</span> @tag.TagName
                                    </a>
                                    <a href="#" onclick="onSuggestTag(event, this, @tag.TagId)"><i id="@String.Format("{0}-tag-glyph", tag.TagId)" class="glyphicon glyphicon-plus"></i></a>
                                }
                                <input id="@String.Format("{0}-tag-hidden", tag.TagId)" type="hidden" value="@tag.DidUserSuggest.ToString().ToLower()" />
                                @:&nbsp;
                                @:&nbsp;
                    }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-body">
            @if (User.Identity.IsAuthenticated)
            {
                @Html.Partial("_DropDownMenuPartial", new TwolipsDating.ViewModels.DropDownMenuViewModel() { ActiveMenuText = "Profile" })

                if (Model.ProfileUserId != Model.CurrentUserId && Model.IsCurrentUserEmailConfirmed)
                {
                    <div class="pull-right">
                        <ul class="nav nav-pills">
                            <li role="presentation"><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalGift" data-keyboard="true" title="Send a gift"><i class="glyphicon glyphicon-gift"></i>&nbsp;Send Gift</button></li>
                            <li role="presentation"><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalMessage" data-keyboard="true" title="Send a message"><i class="glyphicon glyphicon-envelope"></i>&nbsp;Send Message</button></li>
                            <li role="presentation"><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalReview" data-keyboard="true" title="Write a review"><i class="glyphicon glyphicon-edit"></i>&nbsp;Write Review</button></li>
                            <li role="presentation">
                                <button id="button-toggle-ignored" type="button" class="btn btn-primary" title="Receiving updates and messages from this user" onclick="onToggleIgnoredUser(event, this, '@Model.CurrentUserId', '@Model.ProfileUserId')">
                                    <i id="button-toggle-ignored-icon" class="glyphicon glyphicon-volume-up"></i>
                                </button>
                            </li>
                            <li role="presentation">
                                <button id="button-toggle-favorite" type="button" class="btn btn-primary" title="Add to favorites" onclick="onToggleFavoriteProfile(event, this, '@Model.CurrentUserId', '@Model.ProfileUserId', @Model.ProfileId)">
                                    <i id="button-toggle-favorite-icon" class="glyphicon glyphicon-heart-empty"></i>
                                </button>
                            </li>
                            @*
                                <li role="presentation"><a href="#" title="Send a challenge"><i class="glyphicon glyphicon-tower"></i></a></li>
                            *@
                        </ul>
                    </div>}
            }
            else
            {
                <h4>You are viewing this profile as an anonymous user. You can interact with this profile if you @Html.ActionLink("sign up", "register", "account") today!</h4>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="text-center">
                        @if (User.Identity.IsAuthenticated && Model.CurrentUserId == Model.ProfileUserId)
                        {
                            <a href="#" data-toggle="modal" data-target="#modalProfileImage" data-keyboard="true" title="Change your profile image">
                                @if (!String.IsNullOrEmpty(Model.ProfileImagePath))
                                {
                                    <img src="@Model.ProfileImagePath" style="max-height: 128px">
                                }
                                else
                                {
                                    <img src="http://placehold.it/128x128">
                                }
                            </a>
                        }
                        else
                        {
                            if (!String.IsNullOrEmpty(Model.ProfileImagePath))
                            {
                                <img src="@Model.ProfileImagePath" style="max-height: 128px">
                            }
                            else
                            {
                                <img src="http://placehold.it/128x128">
                            }
                        }
                        <h3>@Model.UserName</h3>
                        <h5>@Model.Age&nbsp;&bull;&nbsp;@Model.Gender&nbsp;&bull;&nbsp;@Model.Location</h5>
                    </div>
                    <div class="text-center" style="margin-top: 15px;">
                        <h4>
                            @for (int i = 1; i <= Model.AverageRatingValue; i++)
                            {
                                <i class="glyphicon glyphicon-star"></i>
                            }
                            @for (int j = 1; j <= 5 - Model.AverageRatingValue; j++)
                            {
                                <i class="glyphicon glyphicon-star-empty"></i>
                            }
                        </h4>
                        @*
                            <p>
                            <span style="margin-right: 10px;">
                            <button class="btn btn-primary btn-xs"><i class="glyphicon glyphicon-heart"></i></button>&nbsp;3472
                            </span>
                            <span style="margin-right: 10px;"><button class="btn btn-success btn-xs"><i class="glyphicon glyphicon-thumbs-up"></i></button>&nbsp;51</span>
                            <button class="btn btn-danger btn-xs"><i class="glyphicon glyphicon-thumbs-down"></i></button>&nbsp;7
                            </p>
                        *@
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <p class="panel-title"><i class="glyphicon glyphicon-tags"></i>&nbsp;&nbsp;Tags awarded</p>
                </div>
                <div class="panel-body">
                    @if (Model.AwardedTags != null && Model.AwardedTags.Count > 0)
                    {
                        <div class="tags">
                            @foreach (var tag in Model.AwardedTags)
                            {
                                <a href="#" class="btn btn-default btn-xs" title="@tag.TagDescription">
                                    <span class="badge">@tag.TagCount</span> @tag.TagName
                                </a>
                            }
                        </div>
                    }
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">
                <p class="panel-title"><i class="glyphicon glyphicon-tags"></i>&nbsp;&nbsp;Tags suggested by users</p>
            </div>
            <div class="panel-body">
                @if (User.Identity.IsAuthenticated && Model.ProfileUserId != Model.CurrentUserId && Model.IsCurrentUserEmailConfirmed)
                {
                    <a style="display: inline-block" href="#" data-toggle="modal" data-target="#modalSuggestTags" data-keyboard="true">suggest</a>
                }
                @if (Model.SuggestedTags != null && Model.SuggestedTags.Count > 0)
                {
                    <div class="tags">
                        @foreach (var tag in Model.SuggestedTags)
                        {
                            if (tag.DidUserSuggest)
                            {
                                <a href="#" class="btn btn-primary btn-xs" title="@tag.TagDescription">
                                    <span class="badge">@tag.TagCount</span> @tag.TagName
                                </a>
                            }
                            else
                            {
                                <a href="#" class="btn btn-default btn-xs" title="@tag.TagDescription">
                                    <span class="badge">@tag.TagCount</span> @tag.TagName
                                </a>
                            }
                        }
                    </div>
                }
                else
                {
                    if (Model.CurrentUserId == Model.ProfileUserId)
                    {
                        <p>You don't have any tags yet. Ask people to suggest some!</p>
                    }
                    else
                    {
                        <p>This user doesn't have any tags yet. Suggest some!</p>
                    }
                }
                @*
                    <h4><i class="glyphicon glyphicon-book"></i>&nbsp;&nbsp;Badges earned</h4>
                    <span class="label label-danger"><i class="glyphicon glyphicon-apple"></i></span>
                    <span class="label label-success"><i class="glyphicon glyphicon-music"></i></span>
                    <span class="label label-info"><i class="glyphicon glyphicon-knight"></i></span>
                    <span class="label label-info"><i class="glyphicon glyphicon-king"></i></span>
                    <span class="label label-warning"><i class="glyphicon glyphicon-baby-formula"></i></span>
                *@
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="panel panel-default">
            <div class="panel-body">
                <ul class="nav nav-pills">
                    @if (Model.ActiveTab == "feed")
                    {
                        <li role="presentation" class="active">
                            <a href="@Url.Action("index", new { tab = "feed" })"><i class="glyphicon glyphicon-list-alt"></i>&nbsp; Feed</a>
                        </li>
                    }
                    else
                    {
                        <li role="presentation">
                            <a href="@Url.Action("index", new { tab = "feed" })"><i class="glyphicon glyphicon-list-alt"></i>&nbsp; Feed</a>
                        </li>
                    }
                    @if (Model.ActiveTab == "pictures")
                    {
                        <li role="presentation" class="active">
                            <a href="@Url.Action("index", new { tab = "pictures" })"><i class="glyphicon glyphicon-picture"></i>&nbsp; Pictures</a>
                        </li>
                    }
                    else
                    {
                        <li role="presentation">
                            <a href="@Url.Action("index", new { tab = "pictures" })"><i class="glyphicon glyphicon-picture"></i>&nbsp; Pictures</a>
                        </li>
                    }
                    @if (Model.ActiveTab == "reviews")
                    {
                        <li role="presentation" class="active">
                            <a href="@Url.Action("index", new { tab = "reviews" })"><i class="glyphicon glyphicon-duplicate"></i>&nbsp; Reviews</a>
                        </li>
                    }
                    else
                    {
                        <li role="presentation">
                            <a href="@Url.Action("index", new { tab = "reviews" })"><i class="glyphicon glyphicon-duplicate"></i>&nbsp; Reviews</a>
                        </li>
                    }
                    @if (Model.ActiveTab == "inventory")
                    {
                        <li role="presentation" class="active">
                            <a href="@Url.Action("index", new { tab = "inventory" })"><i class="glyphicon glyphicon-gift"></i>&nbsp; Inventory</a>
                        </li>
                    }
                    else
                    {
                        <li role="presentation">
                            <a href="@Url.Action("index", new { tab = "inventory" })"><i class="glyphicon glyphicon-gift"></i>&nbsp; Inventory</a>
                        </li>
                    }
                    @*
                        <li role="presentation"><a href="#">Achievements</a></li>
                        <li role="presentation"><a href="#">Stats</a></li>
                        <li role="presentation"><a href="#">Trophy Room</a></li>
                    *@
                </ul>
                <hr />
                @if (Model.ActiveTab == "feed")
                {
                    Html.RenderPartial("_FeedPartial", Model.Feed);
                }
                else if (Model.ActiveTab == "pictures")
                {
                    Html.RenderPartial("_PicturesPartial", Model.UploadImage);
                }
                else if (Model.ActiveTab == "reviews")
                {
                    Html.RenderPartial("_ReviewsPartial", Model.Reviews);
                }
                else if (Model.ActiveTab == "inventory")
                {
                    Html.RenderPartial("_InventoryPartial", Model.Inventory);
                }
            </div>

        </div>
    </div>
</div>
}
else if (Model.ViewMode == TwolipsDating.ViewModels.ProfileViewModel.ProfileViewMode.CreateProfile)
{
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-body">
                    @if (Model.IsCurrentUserEmailConfirmed)
                    {
                        <div class="text-center">
                            <h2>Your profile will be here soon</h2>
                            <h4>Fill out some info below to finalize it</h4>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-4 col-md-offset-4">
                                @using (Html.BeginForm("create", "profile", FormMethod.Post, new { role = "form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary()

                                    <div class="form-group">
                                        <p class="control-label">What are you?</p>
                                        @Html.DropDownListFor(m => m.CreateProfile.SelectedGenderId,
                            new SelectList(Model.CreateProfile.Genders, "Key", "Value"),
                            new { @class = "form-control", data_placeholder = "What are you?" })
                                    </div>
                                    <div class="form-group">
                                        <p class="control-label">When were you born?</p>
                                        <div class="row">
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(m => m.CreateProfile.BirthMonth, new { @class = "form-control", @placeholder = "MM", maxlength = "2" })
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(m => m.CreateProfile.BirthDayOfMonth, new { @class = "form-control", @placeholder = "DD", maxlength = "2" })
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(m => m.CreateProfile.BirthYear, new { @class = "form-control", @placeholder = "YYYY", maxlength = "4" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <p class="control-label">Where are you?</p>
                                        @Html.DropDownListFor(m => m.CreateProfile.SelectedCountryId,
                            new SelectList(Model.CreateProfile.Countries, "Key", "Value"),
                            new { @class = "form-control", data_placeholder = "What country are you in?", onchange = "onCountrySelected(event, this)" })
                                    </div>
                                    <div class="form-group">
                                        <input type="text" id="textBoxZipCode" class="form-control" placeholder="Zip Code (ex. 33777)" onblur="onZipCodeBlur(event, this)" maxlength="5" />
                                        @Html.HiddenFor(m => m.CreateProfile.SelectedZipCodeId)
                                        <p id="zipCodeLocationText"></p>
                                    </div>
                                    <div class="form-group">
                                        <input type="text" id="textBoxCity" class="form-control" placeholder="City (ex. London)" onblur="onCityBlur(event, this)" />
                                        @Html.HiddenFor(m => m.CreateProfile.SelectedCityId)
                                        <p id="cityLocationText"></p>
                                    </div>
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary pull-right">OK</button>
                                        <div class="clearfix"></div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <h4>You need to confirm your email address before you can create your profile.</h4>
                    }
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            if ('@Model.IsFavoritedByCurrentUser' == 'True') {
                toggleFavoriteProfileIcon(true);
            } else {
                toggleFavoriteProfileIcon(false);
            }

            if ('@Model.IsIgnoredByCurrentUser' == 'True') {
                toggleIgnoredUserIcon(true);
            } else {
                toggleIgnoredUserIcon(false);
            }

            // when the page loads, select US country by default, fire change event
            var countrySelect = $("#CreateProfile_SelectedCountryId");
            if (countrySelect != null) {
                countrySelect.val(215); // united states
                countrySelect.change();
            }

            // initialize the star rating plugin
            $("#star").raty({
                score: 3,
                hints: ['awful', 'bad', 'average', 'good', 'great'],
                click: function (score, evt) {
                    $("#WriteReview_RatingValue").val(score);
                }
            });

            // handle file selection text updating
            $('.btn-file :file').on('fileselect', function (event, numFiles, label) {

                var input = $(this).parents('.input-group').find(':text'),
                    log = numFiles > 1 ? numFiles + ' files selected' : label;

                if (input.length) {
                    input.val(log);
                } else {
                    if (log) alert(log);
                }

            });
        });

        // handle file selection text updating
        $(document).on('change', '.btn-file :file', function () {
            var input = $(this),
                numFiles = input.get(0).files ? input.get(0).files.length : 1,
                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
            input.trigger('fileselect', [numFiles, label]);
        });

        function onCountrySelected(e, obj) {

            var countryId = $(obj).val();

            if (countryId == 215) { // united states
                $("#textBoxCity").hide();
                var zipCodeSelect = $("#textBoxZipCode");
                zipCodeSelect.show();
                zipCodeSelect.val('');
            } else {
                var citySelect = $("#textBoxCity");
                citySelect.show();
                citySelect.val('');
                $("#textBoxZipCode").hide();
            }

            $("#zipCodeLocationText").html('');
            $("#cityLocationText").html('');
            $("#CreateProfile_SelectedCityId").val('');
            $("#CreateProfile_SelectedZipCodeId").val('');
        }

        function onCityBlur(e, obj) {

            var city = $(obj).val();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("city", "location")' + '/' + city,
                success: function (data) {
                    if (data.CityName === '' || data.CityName === null) {
                        $("#cityLocationText").html("<small>Are you sure that's a real city?</small>");
                        $("#CreateProfile_SelectedCityId").val('');
                    } else {
                        $("#cityLocationText").html("<small>Cool, you're in " + data.CityName + "</small>");
                        $("#CreateProfile_SelectedCityId").val(data.CityId);
                    }
                }
            });
        }

        function onZipCodeBlur(e, obj) {

            var zipCode = $(obj).val();

            if (zipCode.length === 5) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("zip", "location")' + '/' + zipCode,
                    success: function (data) {
                        if (data.CityName === '' || data.CityName === null) {
                            $("#zipCodeLocationText").html("<small>That's a bad zip code.</small>");
                            $("#CreateProfile_SelectedZipCodeId").val('');
                        } else {
                            $("#zipCodeLocationText").html("<small>Cool, you're in " + data.CityName + "</small>");
                            $("#CreateProfile_SelectedZipCodeId").val(zipCode);
                            $("#CreateProfile_SelectedCityId").val(data.CityId);
                        }
                    }
                });
            }
        }

        function onSelectGiftClick(e, obj) {
            e.preventDefault();
            var inventoryItemId = $(obj).attr("id");
            var hiddenSelectedInventoryItemId = $("#SendGift_InventoryItemId");
            hiddenSelectedInventoryItemId.val(inventoryItemId);

            var giftId = $(obj).attr("data-gift-id");
            var hiddenSelectedGiftId = $("#SendGift_GiftId");
            hiddenSelectedGiftId.val(giftId);
        }

        function onSelectProfileImageClick(e, obj) {
            e.preventDefault();
            var imageId = $(obj).attr("id");
            var hiddenProfileImage = $("#ChangeImage_UserImageId");
            hiddenProfileImage.val(imageId);
        }

        function onDeleteImage(e, obj, userImageId, fileName, profileUserId) {

            json = "{\"id\":" + userImageId + ", \"fileName\":\"" + fileName + "\", \"profileUserId\":\"" + profileUserId + "\"}";

            $.ajax({
                type: 'POST',
                url: '@Url.Action("deleteImage", "profile")',
                data: json,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.success) {
                        var div = $("#" + userImageId + "-image-div");
                        div.fadeOut(300, function () {
                            div.remove();
                        });
                    } else {
                        alert(data.error);
                    }
                }
            });
        }

        function onToggleFavoriteProfile(e, obj, currentUserId, profileUserId, profileId) {
            e.preventDefault();

            var json = "{\"currentUserId\":\"" + currentUserId + "\", \"profileUserId\":\"" + profileUserId + "\", \"profileId\":" + profileId + "}";

            $.ajax({
                type: 'POST',
                url: '@Url.Action("toggleFavoriteProfile", "profile")',
                data: json,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.success) {
                        toggleFavoriteProfileIcon(data.isFavorite);
                    } else {
                        alert(data.error);
                    }
                }
            });
        }

        function toggleFavoriteProfileIcon(isFavorite) {
            if (isFavorite) {
                $("#button-toggle-favorite-icon").removeClass("glyphicon-heart-empty");
                $("#button-toggle-favorite-icon").addClass("glyphicon-heart");
                $("#button-toggle-favorite").removeClass("btn-primary");
                $("#button-toggle-favorite").addClass("btn-success");
                $("#button-toggle-favorite").attr("title", "Remove from favorites");
            } else {
                $("#button-toggle-favorite-icon").removeClass("glyphicon-heart");
                $("#button-toggle-favorite-icon").addClass("glyphicon-heart-empty");
                $("#button-toggle-favorite").removeClass("btn-success");
                $("#button-toggle-favorite").addClass("btn-primary");
                $("#button-toggle-favorite").attr("title", "Add to favorites");
            }
        }

        function toggleIgnoredUserIcon(isIgnored) {
            if (isIgnored) {
                $("#button-toggle-ignored-icon").removeClass("glyphicon-volume-up");
                $("#button-toggle-ignored-icon").addClass("glyphicon-volume-off");
                $("#button-toggle-ignored").removeClass("btn-primary");
                $("#button-toggle-ignored").addClass("btn-danger");
                $("#button-toggle-ignored").attr("title", "Not receiving updates and messages from this user");
            } else {
                $("#button-toggle-ignored-icon").removeClass("glyphicon-volume-off");
                $("#button-toggle-ignored-icon").addClass("glyphicon-volume-up");
                $("#button-toggle-ignored").removeClass("btn-danger");
                $("#button-toggle-ignored").addClass("btn-primary");
                $("#button-toggle-ignored").attr("title", "Receiving updates and messages from this user");
            }
        }

        function onToggleIgnoredUser(e, obj, currentUserId, profileUserId) {
            e.preventDefault();

            var json = "{\"currentUserId\":\"" + currentUserId + "\", \"profileUserId\":\"" + profileUserId + "\"}";

            $.ajax({
                type: 'POST',
                url: '@Url.Action("toggleIgnoredUser", "profile")',
                data: json,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.success) {
                        toggleIgnoredUserIcon(data.isIgnored);
                    } else {
                        alert(data.error);
                    }
                }
            });
        }

        function onSuggestTag(e, obj, tagId) {
            e.preventDefault();
            var profileId = $("#ProfileId").val();
            var json = "";

            var didUserSuggest = $("#" + tagId + "-tag-hidden").val();

            if (didUserSuggest === "true") {
                json = "{\"id\":" + tagId + ", \"profileId\":" + profileId + ", \"suggestAction\":\"" + "remove" + "\"}";
            } else {
                json = "{\"id\":" + tagId + ", \"profileId\":" + profileId + ", \"suggestAction\":\"" + "add" + "\"}";
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("suggestTag", "profile")',
                data: json,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.success) {
                        var tagGlyphClassRemove = "";
                        var tagButtonClassRemove = "";
                        var tagGlyphClassAdd = "";
                        var tagButtonClassAdd = "";

                        if (data.suggestAction == "remove") {
                            tagGlyphClassRemove = "glyphicon-minus";
                            tagGlyphClassAdd = "glyphicon-plus";
                            tagButtonClassRemove = "btn-primary";
                            tagButtonClassAdd = "btn-default";
                            $("#" + data.tagId + "-tag-hidden").val(false);

                        } else if (data.suggestAction == "add") {
                            tagGlyphClassRemove = "glyphicon-plus";
                            tagGlyphClassAdd = "glyphicon-minus";
                            tagButtonClassRemove = "btn-default";
                            tagButtonClassAdd = "btn-primary";
                            $("#" + data.tagId + "-tag-hidden").val(true);
                        }

                        var tagGlyph = $("#" + data.tagId + "-tag-glyph");
                        tagGlyph.removeClass(tagGlyphClassRemove);
                        tagGlyph.addClass(tagGlyphClassAdd);

                        var tagButton = $("#" + data.tagId + "-tag-button");
                        tagButton.removeClass(tagButtonClassRemove);
                        tagButton.addClass(tagButtonClassAdd);

                        var tagCount = $("#" + data.tagId + "-tag-count");
                        tagCount.text(data.tagCount);
                    }
                    else {
                        alert(data.error);
                    }
                }
            });
        }
    </script>
}
